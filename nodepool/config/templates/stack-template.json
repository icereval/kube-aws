{{define "SpotFleet"}}
  "SpotFleet": {
    "Type": "AWS::EC2::SpotFleet",
    "Properties": {
      "SpotFleetRequestConfigData": {
        "IamFleetRole": {{$.Worker.SpotFleet.IAMFleetRoleRef}},
        "AllocationStrategy": "diversified",
        "TargetCapacity": {{$.Worker.SpotFleet.TargetCapacity}},
        "SpotPrice": "{{$.Worker.SpotFleet.SpotPrice}}",
        "LaunchSpecifications": [
          {{if .Worker.TopologyPrivate}}
          {{range $subnetIndex, $subnet := $.Worker.PrivateSubnets}}
          {{range $specIndex, $spec := $.Worker.SpotFleet.LaunchSpecifications}}
          {{if or (gt $subnetIndex 0) (gt $specIndex 0) }},{{end}}
          {
            "ImageId": "{{$.AMI}}",
            "InstanceType": "{{$spec.InstanceType}}",
            "KeyName": "{{$.KeyName}}",
            "WeightedCapacity": {{$spec.WeightedCapacity}},
            {{if $spec.SpotPrice}}
            "SpotPrice": "{{$spec.SpotPrice}}",
            {{end}}
            "IamInstanceProfile": {
              "Arn": {
                "Fn::GetAtt" : ["IAMInstanceProfileWorker", "Arn"]
              }
            },
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/xvda",
                "Ebs": {
                  "VolumeSize": "{{$spec.RootVolumeSize}}",
                  {{if gt $spec.RootVolumeIOPS 0}}
                  "Iops": "{{$spec.RootVolumeIOPS}}",
                  {{end}}
                  "VolumeType": "{{$spec.RootVolumeType}}"
                }
              }
            ],
            "SecurityGroups": [
              {{range $sgIndex, $sgRef := $.WorkerSecurityGroupRefs}}
              {{if gt $sgIndex 0}},{{end}}
              {"GroupId":{{$sgRef}}}
              {{end}}
            ],
            "SubnetId": {
              "Ref": "{{$subnet.LogicalName}}"
            },
            "UserData": "{{$.UserDataWorker}}"
          }
          {{end}}
          {{end}}
          {{else}}
          {{range $subnetIndex, $subnet := $.Subnets}}
          {{range $specIndex, $spec := $.Worker.SpotFleet.LaunchSpecifications}}
          {{if or (gt $subnetIndex 0) (gt $specIndex 0) }},{{end}}
          {
            "ImageId": "{{$.AMI}}",
            "InstanceType": "{{$spec.InstanceType}}",
            "KeyName": "{{$.KeyName}}",
            "WeightedCapacity": {{$spec.WeightedCapacity}},
            {{if $spec.SpotPrice}}
            "SpotPrice": "{{$spec.SpotPrice}}",
            {{end}}
            "IamInstanceProfile": {
              "Arn": {
                "Fn::GetAtt" : ["IAMInstanceProfileWorker", "Arn"]
              }
            },
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/xvda",
                "Ebs": {
                  "VolumeSize": "{{$spec.RootVolumeSize}}",
                  {{if gt $spec.RootVolumeIOPS 0}}
                  "Iops": "{{$spec.RootVolumeIOPS}}",
                  {{end}}
                  "VolumeType": "{{$spec.RootVolumeType}}"
                }
              }
            ],
            "SecurityGroups": [
              {{range $sgIndex, $sgRef := $.WorkerSecurityGroupRefs}}
              {{if gt $sgIndex 0}},{{end}}
              {"GroupId":{{$sgRef}}}
              {{end}}
            ],
            "SubnetId": {
              "Ref": "{{$subnet.LogicalName}}"
            },
            "UserData": "{{$.UserDataWorker}}"
          }
          {{end}}
          {{end}}
          {{end}}
        ]
      }
    }
  },
{{end}}
{{define "AutoScaling"}}
    "AutoScaleWorker": {
      "Properties": {
        "AvailabilityZones": [
          {{if .Worker.TopologyPrivate}}
          {{range $index, $subnet := .Worker.PrivateSubnets}}
          {{if gt $index 0}},{{end}}
          "{{$subnet.AvailabilityZone}}"
          {{end}}
          {{else}}
          {{range $index, $subnet := .Subnets}}
          {{if gt $index 0}},{{end}}
          "{{$subnet.AvailabilityZone}}"
          {{end}}
          {{end}}
        ],
        "HealthCheckGracePeriod": 600,
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": {
          "Ref": "LaunchConfigurationWorker"
        },
        "MaxSize": "{{.MaxWorkerCount}}",
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "MinSize": "{{.MinWorkerCount}}",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "PropagateAtLaunch": "true",
            "Value": "{{.ClusterName}}"
          },
          {
            "Key": "kube-aws:node-pool:name",
            "PropagateAtLaunch": "true",
            "Value": "{{.NodePoolName}}"
          },
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": "{{.StackName}}-kube-aws-worker"
          }
        ],
        {{if .Experimental.LoadBalancer.Enabled}}
        "LoadBalancerNames" : [
          {{range $index, $elb := .Experimental.LoadBalancer.Names}}
          {{if $index}},{{end}}
          "{{$elb}}"
          {{end}}
        ],
        {{end}}
        "VPCZoneIdentifier": [
          {{if .Worker.TopologyPrivate}}
          {{range $index, $subnet := .Worker.PrivateSubnets}}
          {{if gt $index 0}},{{end}}
          {
            "Ref": "{{$subnet.LogicalName}}"
          }
          {{end}}
          {{else}}
          {{range $index, $subnet := .Subnets}}
          {{if gt $index 0}},{{end}}
          {
            "Ref": "{{$subnet.LogicalName}}"
          }
          {{end}}
          {{end}}
        ]
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      {{if .Experimental.WaitSignal.Enabled}}
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Count" : "{{.MinWorkerCount}}",
          "Timeout" : "{{.WorkerCreateTimeout}}"
        }
      },
      {{end}}
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" :
          {{if .WorkerSpotPrice}}
          "0"
          {{else}}
          "{{.WorkerRollingUpdateMinInstancesInService}}"
          {{end}},
          {{if .Experimental.WaitSignal.Enabled}}
          "WaitOnResourceSignals" : "true",
          "MaxBatchSize" : "{{.Experimental.WaitSignal.MaxBatchSize}}",
          "PauseTime": "{{.WorkerCreateTimeout}}"
          {{else}}
          "MaxBatchSize" : "1",
          "PauseTime": "PT2M"
          {{end}}
        }
      }
    },

    "LaunchConfigurationWorker": {
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "{{.WorkerRootVolumeSize}}",
              {{if gt .WorkerRootVolumeIOPS 0}}
              "Iops": "{{.WorkerRootVolumeIOPS}}",
              {{end}}
              "VolumeType": "{{.WorkerRootVolumeType}}"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfileWorker"
        },
        "ImageId": "{{.AMI}}",
        "InstanceType": "{{.WorkerInstanceType}}",
        "KeyName": "{{.KeyName}}",
        "SecurityGroups": [
          {{range $sgIndex, $sgRef := $.WorkerSecurityGroupRefs}}
          {{if gt $sgIndex 0}},{{end}}
          {{$sgRef}}
          {{end}}
        ],
        {{if .WorkerSpotPrice}}
        "SpotPrice": {{.WorkerSpotPrice}},
        {{else}}
        "PlacementTenancy": "{{.WorkerTenancy}}",
        {{end}}
        "UserData": "{{ .UserDataWorker }}"
      },
  {{ if .Experimental.AwsEnvironment.Enabled }}
        "Metadata" : {
          "AWS::CloudFormation::Init" : {
            "config" : {
              "commands": {
                "write-environment": {
                  "command": { "Fn::Join" : ["", [ "echo '",
  {{range $variable, $function := .Experimental.AwsEnvironment.Environment}}
  "{{$variable}}=", {{$function}} , "\n",
  {{end}}
  "' > /etc/aws-environment" ] ] }
                }
              }
            }
          }
        },
  {{end}}
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
{{end}}
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "kube-aws Kubernetes node pool {{.ClusterName}} {{.NodePoolName}}",
  "Resources": {
    {{if .Worker.SpotFleet.Enabled}}
    {{template "SpotFleet" .}}
    {{else}}
    {{template "AutoScaling" .}}
    {{end}}
    "IAMInstanceProfileWorker": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRoleWorker"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "IAMRoleWorker": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com{{if .IsChinaRegion}}.cn{{end}}"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ec2:Describe*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "ec2:AttachVolume",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "ec2:DetachVolume",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action" : "kms:Decrypt",
                  "Effect" : "Allow",
                  "Resource" : "{{.KMSKeyARN}}"
                },
                {{if .Experimental.WaitSignal.Enabled}}
                {
                  "Action": "cloudformation:SignalResource",
                  "Effect": "Allow",
                  "Resource":
                    { "Fn::Join": [ "", [
                      "arn:aws:cloudformation:",
                      { "Ref": "AWS::Region" },
                      ":",
                      { "Ref": "AWS::AccountId" },
                      ":stack/",
                      { "Ref": "AWS::StackName" },
                      "/*" ]
                    ] }
                },
                {{end}}
                {{if .Experimental.AwsNodeLabels.Enabled}}
                {
                  "Action": "autoscaling:Describe*",
                  "Effect": "Allow",
                  "Resource": [ "*" ]
                },
                {{end}}
                {{if .Worker.SpotFleet.Enabled}}
                {
                  "Action": "ec2:CreateTags",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {{if .Experimental.LoadBalancer.Enabled}}
                {
                  "Action": "elasticloadbalancing:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {{end}}
                {{end}}
                {
                  "Action": [
                    "ecr:GetAuthorizationToken",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetRepositoryPolicy",
                    "ecr:DescribeRepositories",
                    "ecr:ListImages",
                    "ecr:BatchGetImage"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "root"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    }

    {{if $.ElasticFileSystemID}}
    {{if $.Worker.TopologyPrivate}}
    {{range $index, $subnet := .Worker.PrivateSubnets}}
    ,
    "{{$subnet.LogicalName}}MountTarget": {
      "Properties" : {
        "FileSystemId": "{{$.ElasticFileSystemID}}",
        "SubnetId": { "Ref": "{{$subnet.LogicalName}}" },
        "SecurityGroups": [ { "Ref": "SecurityGroupMountTarget" } ]
      },
      "Type" : "AWS::EFS::MountTarget"
    }
    {{end}}
    {{else}}
    {{range $index, $subnet := .Subnets}}
    ,
    "{{$subnet.LogicalName}}MountTarget": {
      "Properties" : {
        "FileSystemId": "{{$.ElasticFileSystemID}}",
        "SubnetId": { "Ref": "{{$subnet.LogicalName}}" },
        "SecurityGroups": [ { "Ref": "SecurityGroupMountTarget" } ]
      },
      "Type" : "AWS::EFS::MountTarget"
    }
    {{end}}
    {{end}}
    {{end}}

    {{if $.Worker.TopologyPrivate}}
    {{range $index, $subnet := .Worker.PrivateSubnets}}
    ,
    "{{$subnet.LogicalName}}": {
      "Properties": {
        "AvailabilityZone": "{{$subnet.AvailabilityZone}}",
        "CidrBlock": "{{$subnet.InstanceCIDR}}",
        "MapPublicIpOnLaunch": {{not $.Worker.TopologyPrivate}},
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{$.ClusterName}}-{{$.NodePoolName}}-{{$subnet.LogicalName}}"
          },
          {
            "Key": "KubernetesCluster",
            "Value": "{{$.ClusterName}}"
          }
        ],
        "VpcId": {{$.VPCRef}}
      },
      "Type": "AWS::EC2::Subnet"
    },
    "{{$subnet.LogicalName}}RouteTableAssociation": {
      "Properties": {
        "RouteTableId":
          {{if not $subnet.RouteTableID}}
          {"Fn::ImportValue" : {"Fn::Sub" : "{{$.ClusterName}}-PrivateRouteTable{{$subnet.AvailabilityZoneLogicalName}}"}},
          {{else}}
          "{{$subnet.RouteTableID}}",
          {{end}}
        "SubnetId": {
          "Ref": "{{$subnet.LogicalName}}"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }
    {{end}}
    {{else}}
    {{range $index, $subnet := .Subnets}}
    ,
    "{{$subnet.LogicalName}}": {
      "Properties": {
        "AvailabilityZone": "{{$subnet.AvailabilityZone}}",
        "CidrBlock": "{{$subnet.InstanceCIDR}}",
        "MapPublicIpOnLaunch": {{$.MapPublicIPs}},
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{$.ClusterName}}-{{$.NodePoolName}}-{{$subnet.LogicalName}}"
          },
          {
            "Key": "KubernetesCluster",
            "Value": "{{$.ClusterName}}"
          }
        ],
        "VpcId": {{$.VPCRef}}
      },
      "Type": "AWS::EC2::Subnet"
    },
    "{{$subnet.LogicalName}}RouteTableAssociation": {
      "Properties": {
        "RouteTableId":
          {{if not $.RouteTableID}}
          {"Fn::ImportValue" : {"Fn::Sub" : "{{$.ClusterName}}-PublicRouteTable"}},
          {{else}}
          "{{$.RouteTableID}}",
          {{end}}
        "SubnetId": {
          "Ref": "{{$subnet.LogicalName}}"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }
    {{end}}
    {{end}}
  }
}
